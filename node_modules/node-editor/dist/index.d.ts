declare const internal: unique symbol;
declare const updateTransform: unique symbol;
declare const refreshPosition: unique symbol;
declare const refreshColor: unique symbol;
declare const refreshConnection: unique symbol;
declare const notifyConnection: unique symbol;
declare class NodeEditorTransformEvent extends Event {
    x: number;
    y: number;
    width: number;
    height: number;
    didResize: boolean;
    didMove: boolean;
    constructor(opts: {
        x: number;
        y: number;
        width: number;
        height: number;
        didResize: boolean;
        didMove: boolean;
    });
}
declare class NodePortPositionEvent extends Event {
    x: number;
    y: number;
    constructor(x: number, y: number);
}
declare class NodePortColorEvent extends Event {
    color: string;
    constructor(color: string);
}
declare class NodePortOnlineEvent extends Event {
    port: NodePortElement;
    constructor(port: NodePortElement);
}
declare class NodePortOfflineEvent extends Event {
    port: NodePortElement;
    constructor(port: NodePortElement);
}
declare class NodeEditorAddEvent extends Event {
    editor: NodeEditorElement;
    constructor(editor: NodeEditorElement);
}
declare class NodeEditorRemoveEvent extends Event {
    editor: NodeEditorElement;
    constructor(editor: NodeEditorElement);
}
declare class NodeNameEvent extends Event {
    name: string | null;
    oldName: string | null;
    constructor(name: string | null, oldName: string | null);
}
declare class NodeLinkEvent extends Event {
    link: NodeLinkElement;
    constructor(link: NodeLinkElement);
}
declare class NodeUnlinkEvent extends Event {
    link: NodeLinkElement;
    constructor(link: NodeLinkElement);
}
declare class NodeConnectEvent extends Event {
    link: NodeLinkElement;
    constructor(link: NodeLinkElement, bubbles: boolean);
}
declare class NodeDisconnectEvent extends Event {
    link: NodeLinkElement;
    constructor(link: NodeLinkElement, bubbles: boolean);
}
declare class NodePortElement extends HTMLElement {
    private [internal];
    static get observedAttributes(): string[];
    constructor();
    get numConnections(): number;
    get connections(): NodeLinkElement[];
    get name(): string | null;
    set name(v: string | null);
    get nodeEditor(): NodeEditorElement | null;
    get color(): string;
    set color(v: string | null);
    get isOutputPort(): boolean;
    set isOutputPort(v: boolean | null);
    get handleX(): number;
    get handleY(): number;
    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
    private [refreshColor];
    private [refreshPosition];
    connectedCallback(): void;
    disconnectedCallback(): void;
}
declare class NodeTitleElement extends HTMLElement {
    private [internal];
    constructor();
    get nodeEditor(): NodeEditorElement | null;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
declare class NodeEditorElement extends HTMLElement {
    private [internal];
    static get observedAttributes(): string[];
    constructor();
    getPort(name: string): NodePortElement | null;
    connectedCallback(): void;
    disconnectedCallback(): void;
    get nodeMap(): NodeMapElement | null;
    get x(): number;
    set x(v: number | string | null);
    get y(): number;
    set y(v: number | string | null);
    get name(): string | null;
    set name(v: string | null);
    get width(): number;
    set width(v: number | string | null);
    get height(): number;
    set height(v: number | string | null);
    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;
    private [updateTransform];
}
declare class NodeLinkElement extends HTMLElement {
    private [internal];
    static get observedAttributes(): string[];
    constructor();
    get nodeMap(): NodeMapElement | null;
    get fromName(): string | null;
    set fromName(v: string | null);
    get toName(): string | null;
    set toName(v: string | null);
    get inName(): string | null;
    set inName(v: string | null);
    get outName(): string | null;
    set outName(v: string | null);
    get inPort(): NodePortElement | null;
    get outPort(): NodePortElement | null;
    private [notifyConnection];
    private [refreshConnection];
    private [refreshPosition];
    private [refreshColor];
    attributeChangedCallback(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
declare class NodeMapElement extends HTMLElement {
    private [internal];
    constructor();
    getEditor(name: string): NodeEditorElement | null;
    get zoom(): number;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
export { NodeTitleElement, NodePortElement, NodeEditorElement, NodeLinkElement, NodeMapElement, NodeEditorTransformEvent, NodePortPositionEvent, NodePortColorEvent, NodePortOnlineEvent, NodePortOfflineEvent, NodeEditorAddEvent, NodeEditorRemoveEvent, NodeNameEvent, NodeLinkEvent, NodeUnlinkEvent, NodeConnectEvent, NodeDisconnectEvent };
//# sourceMappingURL=index.d.ts.map